class Trie {
    
private:
    struct TrieNode{
        struct TrieNode *child[26];
        bool isEnd;
        
        TrieNode(){
            isEnd = false;
            for(int i=0; i<26; i++) child[i]=NULL;
        }
    };
        
TrieNode* root;

public:
    
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        TrieNode* curr=root;
        for(int i=0; i<word.length(); i++){
            int index=word[i]-'a';
            if(curr->child[index]==NULL) 
                curr->child[index] = new TrieNode();
            curr=curr->child[index];
        }
        curr->isEnd = true;
    }
    
    bool search(string word) {
        TrieNode *curr= root;
        for(int i=0; i<word.length(); i++){
            int index=word[i]-'a';
            if(curr->child[index]==NULL) return false;
            curr=curr->child[index];
        }
        return curr->isEnd;
    } 
    
    bool startsWith(string prefix) {
        TrieNode *curr = root;
        for(int i=0; i<prefix.length(); i++){
            int index=prefix[i]-'a';
            if(curr->child[index]==NULL) return false;
            curr=curr->child[index];
        }
        return true;
    }
};
